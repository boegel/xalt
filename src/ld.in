#!/bin/bash
#-*- shell-script -*-
#
#  MAGIC_STRING__XALT__XALT__MAGIC_STRING
#
# Git Version: @git@

#-----------------------------------------------------------------------
# XALT: A tool that tracks users jobs and environments on a cluster.
# Copyright (C) 2013-2014 University of Texas at Austin
# Copyright (C) 2013-2014 University of Tennessee
# 
# This library is free software; you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as
# published by the Free Software Foundation; either version 2.1 of 
# the License, or (at your option) any later version. 
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser  General Public License for more details. 
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free
# Software Foundation, Inc., 59 Temple Place, Suite 330,
# Boston, MA 02111-1307 USA
#-----------------------------------------------------------------------

##########################################################################
#
# ld wrapper: Add XALT "scribble" to executable or shared library.
#             Then run real ld, with trace.  Save the link trace
#             into an XALT link record.
#
##########################################################################


unset LD_PRELOAD
LD_LIB_PATH=@sys_ld_lib_path@
XALT_DIR=@xalt_dir@
DIRNAME=@path_to_dirname@
BASENAME=@path_to_basename@
READLINK=@path_to_readlink@
SHA1SUM=@sha1sum@
XALT_FILE_PREFIX=@xalt_file_prefix@
HAVE_WORKING_LIBUUID=@have_working_libuuid@
MY_NAME=$($BASENAME $0)
MY_DIR=$($DIRNAME $($READLINK -f $0))

if [ -z "$XALT_TRANSMISSION_STYLE" ]; then
   XALT_TRANSMISSION_STYLE=@transmission@
fi


source $MY_DIR/xalt_helper_functions.sh

##########################################################################
# Check for user requested tracing.
request_tracing "$@"  # This returns ${argA[@]} and XALT_TRACING=yes/no

tracing_msg "Starting ld"

########################################################################
# Search for the command  and make sure that you don't find this one.

EXEC_X=/usr/bin/${MY_NAME}.x
find_real_command $0 $EXEC_X # this command sets $MY_CMD


########################################################################
# Loop over command line arguments to ld. This code is used instead of
# getopt and others because this wrapper script should not try to know
# all the options to ld. Instead we are just "cherry-picking" the options
# we want to know about.

EXEC="a.out"
append=false
prev=
done=false
BIT32FLAG=
for option
do
  if [ -n "$prev" ]; then
    eval "$prev=\$option"
    prev=
    continue
  fi

  case "$option" in
    -*=*) optarg=`builtin echo "$option" | sed  's/[-_a-zA-Z0-9]*=//'` ;;
    -*) optarg=;;
    *) optarg=; done=true;;
  esac
  
  case $option in
    --version|-v|--help)
      $MY_CMD "${argA[@]}"
      exit $?
      ;;
    --trace|-t)
      USER_TRACE="true"
      ;;

    elf_i386)
      BIT32FLAG=--32
      ;;

    -o)
      prev='EXEC'
      ;;
  esac

  #####################################################################
  # This code below is commented out.  Since this script is not parsing
  # all options the done flag won't work.

  #if [ "$done" = "true" ]; then
  #  break;
  #fi

done

############################################################
# Test to see if the executable is an autoconf or cmake build
# => skip those.

SKIP=
case "$EXEC" in
  conftest)
    SKIP=true;;
  cmTryCompileExec[0-9]*)
    SKIP=true;;
  cmTC_[a-f0-9]*)
    SKIP=true;;
esac
if [ -z "$HOME" -o -z "$USER" ]; then
   SKIP=true
fi


if [ "$XALT_EXECUTABLE_TRACKING" != yes -o "$SKIP" = true ]; then
  $MY_CMD "${argA[@]}"
  status=$?
  exit $status
fi


XALT_LIBEXEC_DIR=$XALT_DIR/libexec
XALT_SITE_DIR=$XALT_DIR/site
GEN_ASSEMBLY=$XALT_LIBEXEC_DIR/xalt_generate_assembly
GEN_LINKDATA=$XALT_LIBEXEC_DIR/xalt_generate_linkdata
STRIP_LINKLIB=$XALT_LIBEXEC_DIR/xalt_strip_linklib
EXTRACT_LINKER=$XALT_LIBEXEC_DIR/xalt_extract_linker
SYS_HOST_CMD=$XALT_LIBEXEC_DIR/xalt_syshost
REALPATH=$XALT_LIBEXEC_DIR/xalt_realpath
LD_LIBRARY_PATH=$LD_LIB_PATH
SYSHOST=$(LD_LIBRARY_PATH=$LD_LIB_PATH $SYS_HOST_CMD)
UUIDGEN=@uuidgen@
RM=@path_to_rm@
AS=@path_to_as@
CAT=@path_to_cat@
MKDIR=@path_to_mkdir@
GREP=@grep@
PyPATH="/usr/bin:/bin"


UUID=`$UUIDGEN`
DATESTR=`date +%Y_%m_%d_%H_%M_%S`
WRKDIR=/tmp/${USER}_${DATESTR}_${UUID}
LINKLINE_OUT=$WRKDIR/link.txt
LINKLINE_ERR=$WRKDIR/link.err
ARGSRC=$WRKDIR/xalt.s
ARGOBJ=$WRKDIR/xalt.o
FUNCRAW=$WRKDIR/funcraw.txt
FUNCLIST=$WRKDIR/funclist.txt
if [ "$XALT_FILE_PREFIX" != 'USE_HOME' ]; then
    RESULT=$XALT_FILE_PREFIX/$USER/link.${SYSHOST}.${DATESTR}.$UUID.json
else
    RESULT=$HOME/.xalt.d/link.${SYSHOST}.${DATESTR}.$UUID.json
fi

if [ -z "$BIT32FLAG" ]; then
  XALT_LIB_DIR=$XALT_DIR/lib64
  XALT_INIT_ROUTINE_OBJ="$XALT_LIB_DIR/xalt_initialize.o $XALT_LIB_DIR/xalt_syshost.o $XALT_LIB_DIR/xalt_quotestring.o $XALT_LIB_DIR/xalt_fgets_alloc.o"
else
  XALT_LIB_DIR=$XALT_DIR/lib
  XALT_INIT_ROUTINE_OBJ="$XALT_LIB_DIR/xalt_initialize_32.o $XALT_LIB_DIR/xalt_syshost_32.o $XALT_LIB_DIR/xalt_quotestring_32.o $XALT_LIB_DIR/xalt_fgets_alloc_32.o"
fi
  

if [ ! -d $WRKDIR ]; then
  $MKDIR -p $WRKDIR
fi

# Get the compiler information
COMP_T=$($EXTRACT_LINKER)

EPOCH=$(LD_LIBRARY_PATH=$LD_LIB_PATH $GEN_ASSEMBLY "$UUID" "$SYSHOST" "$ARGSRC" "$COMP_T")

#
# If the $ARGSRC exists then build it
# otherwise don't try to link with it.
OBJ=$ARGOBJ
if [ -f "$ARGSRC" ]; then
  $AS $ARGSRC $BIT32FLAG -o $OBJ
else
  OBJ=""
fi

###################################################################
# start a subshell in the background for the intentional
# failed link for function tracking
function_tracking()
{
   STRIP=$(LD_LIBRARY_PATH=$LD_LIB_PATH $STRIP_LINKLIB "${argA[@]}")
   $MY_CMD $STRIP --unresolved-symbols=report-all -o /dev/null > $FUNCRAW 2>&1
}

if [ "$XALT_DISABLE_BACKGROUNDING" = yes ]; then
    function_tracking
else
    (
       function_tracking
    )&
fi

tracing_msg $MY_CMD "${argA[@]}"

if [ "$HAVE_WORKING_LIBUUID" = "yes" ]; then
    LIBUUID="-luuid"
fi

$MY_CMD "${argA[@]}" $OBJ $XALT_INIT_ROUTINE_OBJ  $LIBUUID -t > $LINKLINE_OUT  2>&1
status=$?

if [ ! -f "$EXEC" ]; then
   exit $status
fi

EXEC=$($REALPATH $EXEC)


if [ -n "$USER_TRACE" ]; then
  $CAT $LINKLINE_OUT | $GREP -v $ARGOBJ 
fi

# Get the sha1sum for the executable because it might move or disappear!
SHA1SUM_EXEC=$($SHA1SUM $EXEC)

wait #-- wait for subshell to finish

tracing_msg XALT_TRANSMISSION_STYLE $XALT_TRANSMISSION_STYLE

###################################################################
# start a subshell in the background for reporting the link results
generate_linkdata()
{
  LD_LIBRARY_PATH=$LD_LIB_PATH $GEN_LINKDATA "$UUID" "`pwd`" "$SYSHOST" "$EXEC" "${SHA1SUM_EXEC%% *}" "$ARGOBJ" "$EPOCH" "$FUNCRAW" "$LINKLINE_OUT" "$RESULT" "$COMP_T"
  $RM -rf $WRKDIR  
}

if [ "$XALT_DISABLE_BACKGROUNDING" = yes ]; then
    generate_linkdata
else
    (
       generate_linkdata
    )&
fi

exit $status
