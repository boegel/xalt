AC_INIT(Makefile.in)
AC_PROG_CC
AC_PREFIX_DEFAULT(/usr/local)
AC_CONFIG_SUBDIRS(compiled)

AC_SUBST(TRANSMISSION)
AC_ARG_WITH(transmission,
    AC_HELP_STRING([--with-transmission=ans],[transmission style (file,syslog,directdb) [[file]]]),
    TRANSMISSION="$withval"
    AC_MSG_RESULT([TRANSMISSION=$with_transmission])
    AC_DEFINE_UNQUOTED(TRANSMISSION, "$with_transmission")dnl
    ,
    withval="file"
    AC_MSG_RESULT([TRANSMISSION=$withval])
    TRANSMISSION="$withval"
    AC_DEFINE_UNQUOTED(TRANSMISSION, "$withval"))dnl

AC_SUBST(XALT_FILE_PREFIX)
AC_ARG_WITH(xaltFilePrefix,
    AC_HELP_STRING([--with-xaltFilePrefix=ans],[Prefix where the json files are written [[$HOME]]]),
    XALT_FILE_PREFIX="$withval"
    AC_MSG_RESULT([XALT_FILE_PREFIX=$with_xaltFilePrefix])
    AC_DEFINE_UNQUOTED(XALT_FILE_PREFIX, "$with_xaltFilePrefix")dnl
    ,
    withval="USE_HOME"
    AC_MSG_RESULT([XALT_FILE_PREFIX=$withval])
    XALT_FILE_PREFIX="$withval"
    AC_DEFINE_UNQUOTED(XALT_FILE_PREFIX, "$withval"))dnl


AC_SUBST(ETC_DIR)
AC_ARG_WITH(etcDir,
    AC_HELP_STRING([--with-etcDir=ans],[Directory where xalt_db.conf and reverseMapD can be found [[.]]]),
    ETC_DIR="$withval"
    AC_MSG_RESULT([ETC_DIR=$with_etcDir])
    AC_DEFINE_UNQUOTED(ETC_DIR, "$with_etcDir")dnl
    ,
    withval="."
    AC_MSG_RESULT([ETC_DIR=$withval])
    ETC_DIR="$withval"
    AC_DEFINE_UNQUOTED(ETC_DIR, "$withval"))dnl

AC_SUBST(XALT_CONFIG_PY)
AC_ARG_WITH(config,
    AC_HELP_STRING([--with-config=ans],[A python file defining the accept, ignore, hostname pattern lists [[NO DEFAULT]]]),
    XALT_CONFIG_PY="$withval"
    AC_MSG_RESULT([XALT_CONFIG_PY=$with_config])
    AC_DEFINE_UNQUOTED(XALT_CONFIG_PY, "$with_config")dnl
    ,
    withval="no"
    AC_MSG_RESULT([XALT_CONFIG_PY=$withval])
    XALT_CONFIG_PY="$withval"
    AC_DEFINE_UNQUOTED(XALT_CONFIG_PY, "$withval"))dnl

AC_SUBST(PYMOD_MYSQLDB)
AC_ARG_WITH(pymodMySQL,
    AC_HELP_STRING([--with-pymodMySQL=ans],[Require the python MySQLdb module to build XALT [[yes]]]),
    PYMOD_MYSQLDB="$withval"
    AC_MSG_RESULT([PYMOD_MYSQLDB=$with_pymodMySQL])
    AC_DEFINE_UNQUOTED(PYMOD_MYSQLDB, "$with_pymodMySQL")dnl
    ,
    withval="yes"
    AC_MSG_RESULT([PYMOD_MYSQLDB=$withval])
    PYMOD_MYSQLDB="$withval"
    AC_DEFINE_UNQUOTED(PYMOD_MYSQLDB, "$withval"))dnl

AC_SUBST(SYSTEM_PATH)
AC_ARG_WITH(systemPath,
    AC_HELP_STRING([--with-systemPath=ans],[]),
    SYSTEM_PATH="$withval"
    AC_MSG_RESULT([SYSTEM_PATH=$with_systemPath])
    AC_DEFINE_UNQUOTED(SYSTEM_PATH, "$with_systemPath")dnl
    ,
    withval="/usr/bin:/bin"
    AC_MSG_RESULT([SYSTEM_PATH=$withval])
    SYSTEM_PATH="$withval"
    AC_DEFINE_UNQUOTED(SYSTEM_PATH, "$withval"))dnl

AC_SUBST(SYSLOG_MSG_SZ)
AC_ARG_WITH(syslogMsgSz,
    AC_HELP_STRING([--with-syslogMsgSz=ans],[]),
    SYSLOG_MSG_SZ="$withval"
    AC_MSG_RESULT([SYSLOG_MSG_SZ=$with_syslogMsgSz])
    AC_DEFINE_UNQUOTED(SYSLOG_MSG_SZ, "$with_syslogMsgSz")dnl
    ,
    withval="512"
    AC_MSG_RESULT([SYSLOG_MSG_SZ=$withval])
    SYSLOG_MSG_SZ="$withval"
    AC_DEFINE_UNQUOTED(SYSLOG_MSG_SZ, "$withval"))dnl

AC_SUBST(MYSQL_STATIC)
AC_ARG_WITH(mysqlStatic,
    AC_HELP_STRING([--with-mysqlStatic=ans],[Require that libmysqlclient be linked in statically [[no]]]),
    MYSQL_STATIC="$withval"
    AC_MSG_RESULT([MYSQL_STATIC=$with_mysqlStatic])
    AC_DEFINE_UNQUOTED(MYSQL_STATIC, "$with_mysqlStatic")dnl
    ,
    withval="no"
    AC_MSG_RESULT([MYSQL_STATIC=$withval])
    MYSQL_STATIC="$withval"
    AC_DEFINE_UNQUOTED(MYSQL_STATIC, "$withval"))dnl

AC_SUBST(SYSHOST_CONFIG)
AC_ARG_WITH(syshostConfig,
    AC_HELP_STRING([--with-syshostConfig=ans],[Directory where xalt_db.conf and reverseMapD can be found [[.]]]),
    SYSHOST_CONFIG="$withval"
    AC_MSG_RESULT([SYSHOST_CONFIG=$with_syshostConfig])
    AC_DEFINE_UNQUOTED(SYSHOST_CONFIG, "$with_syshostConfig")dnl
    ,
    withval="no"
    AC_MSG_RESULT([SYSHOST_CONFIG=$withval])
    SYSHOST_CONFIG="$withval"
    AC_DEFINE_UNQUOTED(SYSHOST_CONFIG, "$withval"))dnl

AC_SUBST(SYS_LD_LIB_PATH)
SYS_LD_LIB_PATH=$LD_LIBRARY_PATH

AC_SUBST(HAVE_32BIT)

AX_TEST_COMPILE_FLAG([-m32],[HAVE_32BIT=yes],[HAVE_32BIT=no])
AX_TEST_COMPILE_FLAG([-std=c++11],[HAVE_CXX11=yes],[HAVE_CXX11=no])

AC_SUBST(PATH_TO_AS)
AC_SUBST(PATH_TO_BASENAME)
AC_SUBST(PATH_TO_CAT)
AC_SUBST(PATH_TO_DATE)
AC_SUBST(PATH_TO_DIRNAME)
AC_SUBST(PATH_TO_FILE)
AC_SUBST(PATH_TO_GIT)
AC_SUBST(PATH_TO_GREP)
AC_SUBST(PATH_TO_HEAD)
AC_SUBST(PATH_TO_LDD)
AC_SUBST(PATH_TO_LOGGER)
AC_SUBST(PATH_TO_MKDIR)
AC_SUBST(PATH_TO_OBJDUMP)
AC_SUBST(PATH_TO_PSTREE)
AC_SUBST(PATH_TO_READLINK)
AC_SUBST(PATH_TO_RM)
AC_SUBST(PATH_TO_SHA1SUM)
AC_SUBST(PATH_TO_UUIDGEN)

AC_SUBST(BUILD_PSTREE)
AC_SUBST(USE_CONTRIB_ARGPARSE)
AC_SUBST(MYSQL_CONFIG)

AC_PATH_PROG(PATH_TO_GIT,git, [])
AC_PATH_PROG(PATH_TO_AS,as, [])
AC_PATH_PROG(PATH_TO_BASENAME, basename, [])
AC_PATH_PROG(PATH_TO_CAT, cat, [])
AC_PATH_PROG(PATH_TO_DATE, date, [])
AC_PATH_PROG(PATH_TO_DIRNAME, dirname, [])
AC_PATH_PROG(PATH_TO_FILE, file, "")
AC_PATH_PROG(PATH_TO_GIT, git, "")
AC_PATH_PROG(PATH_TO_GREP, grep, [])
AC_PATH_PROG(PATH_TO_HEAD, head, [])
AC_PATH_PROG(PATH_TO_LDD, ldd, [])
AC_PATH_PROG(PATH_TO_LOGGER, logger, [])
AC_PATH_PROG(PATH_TO_MKDIR,mkdir, [])
AC_PATH_PROG(PATH_TO_OBJDUMP, objdump, "")
AC_PATH_PROG(PATH_TO_OTOOL, otool, "")
AC_PATH_PROG(PATH_TO_PYTHON, python, "")
AC_PATH_PROG(PATH_TO_READLINK, readlink, [])
AC_PATH_PROG(PATH_TO_RM, rm, [])
AC_PATH_PROG(PATH_TO_SHA1SUM, sha1sum, "")
AC_PATH_PROG(PATH_TO_UUIDGEN,uuidgen, [])

AC_PATH_PROG(MYSQL_CONFIG,[mysql_config], UNKNOWN)

AC_SUBST(HAVE_PYMOD_MYSQLDB)
AC_PYTHON_MODULE([MySQLdb])
AC_CHECK_HEADER(uuid/uuid.h)

AC_SUBST(HAVE_WORKING_LIBUUID)
HAVE_WORKING_LIBUUID=no

if test $ac_cv_header_uuid_uuid_h = yes; then
  AC_SEARCH_LIBS([uuid_generate],[uuid], [AC_DEFINE(HAVE_LIBUUID) HAVE_WORKING_LIBUUID=yes], [])
fi

if test $HAVE_WORKING_LIBUUID=no -a ! -f /proc/sys/kernel/random/uuid; then
   echo
   echo "======================================================="
   echo "Unable to install XALT without uuid and"
   echo "without /proc/sys/kernel/random/uuid"
   echo "See the manual for details"
   echo "======================================================="
   exit 1
fi  


AC_SUBST(VERSION)
AC_SUBST(XALT_GIT_VERSION)

VERSION=$(cat $ac_confdir/.version)
echo "VERSION=$VERSION"
if test -n "$PATH_TO_GIT" -a -d $srcdir/.git ; then
  xaltV=`(cd $srcdir; $PATH_TO_GIT describe)`
else
  xaltV="@git@"
fi
XALT_GIT_VERSION=$xaltV

if test "$HAVE_CXX11" = no; then
   echo
   echo "======================================================="
   echo "Unable to install XALT without g++ supporting -std=c++11"
   echo "See the manual for details"
   echo "======================================================="
   exit 1
fi

if test "$XALT_CONFIG_PY" = no; then
   echo
   echo "======================================================="
   echo "Unable to install XALT without setting --with-config=..."
   echo "See the manual for details"
   echo "======================================================="
   exit 1
fi

if ! test -f $XALT_CONFIG_PY; then
   echo
   echo "======================================================="
   echo "Unable to find the file: $XALT_CONFIG_PY"
   echo "quitting!"
   echo "======================================================="
   exit 1
fi

if test "$MYSQL_CONFIG" = UNKNOWN; then
   echo
   echo "======================================================="
   echo "Unable to install XALT without the program mysql_config"
   echo "This program is used to find the MySQL installation"
   echo "See the manual for details"
   echo "======================================================="
   exit 1
fi

if test "$PYMOD_MYSQLDB" != no -a "$HAVE_PYMOD_MYSQLDB" = no; then
   echo
   echo "======================================================="
   echo "Unable to install XALT without the python module: MySQLdb"
   echo "To install it do: pip install MySQL-python"
   echo "======================================================="
   exit 1
fi

if test "$HAVE_PYMOD_MYSQLDB" = no; then
   echo
   echo "======================================================="
   echo "XALT only requires the MySQL-python module when analyzing"
   echo "data.  Make sure that you install MySQL-python module"
   echo "where every you are analyzing the XALT data"
   echo "======================================================="
fi


BUILD_PSTREE=no

if test "$SYSHOST_CONFIG" = no; then
   echo
   echo "======================================================="
   echo "Unable to install XALT without setting --with-syshostConfig=..."
   echo "Your choices are hardcode, nth_name, read_file and mapping."
   echo "See the manual for details."
   echo "======================================================="
   exit 1
fi
   



printf "Use contrib argparse"
USE_CONTRIB_ARGPARSE=no
versionStr=$(python --version 2>&1 | head -1)
major_version=`expr "$versionStr" : 'Python \+\([[0-9]]\+\)\.'`
minor_version=`expr "$versionStr" : 'Python \+[[0-9]]\+\.\([[0-9]]\+\)'`
version=`expr $major_version \* 100000 + $minor_version`
contrib_version=200007
if test $version -lt $contrib_version ; then
  USE_CONTRIB_ARGPARSE=yes
fi
echo "... $USE_CONTRIB_ARGPARSE"

if ! test -d compiled/build_h; then
  mkdir -p compiled/build_h
fi

$PATH_TO_PYTHON $ac_confdir/src/build_xalt_regex.py --confFn $XALT_CONFIG_PY --input $ac_confdir/compiled/xalt_regex.template --output compiled/build_h/xalt_regex.h
$PATH_TO_PYTHON $ac_confdir/src/build_syshost_routine.py --input $SYSHOST_CONFIG --output compiled/xalt_syshost.c

AC_OUTPUT(makefile:Makefile.in compiled/build_h/xalt_config.h:compiled/xalt_config.h.in)

AX_SUMMARIZE_CONFIG
